classdef (Sealed) WidgetFactory < handle
    
    methods ( Access = public )
        
        function obj = WidgetFactory( resolution_px )
        
            obj.figure_position = obj.compute_figure_position( resolution_px );
            obj.previous_position = obj.figure_position;
            
            obj.first_widget = true;
            
        end
        
        
        function handle = create_figure( obj, name )
            
            handle = figure();
            handle.Name = sprintf( 'Orientation Data for %s', name );
            handle.NumberTitle = 'off';
            handle.Position = obj.figure_position;
            handle.MenuBar = 'none';
            handle.ToolBar = 'none';
            handle.DockControls = 'off';
            handle.Resize = 'off';
            movegui( handle, 'center' );
            
        end
        
        
        function h = add_picked_point_reporter_widget( obj, figure_handle )
            
            x = obj.center( PointReporterWidget.get_width() );
            y = obj.get_next_y( PointReporterWidget.get_height( obj.FONT_SIZE ) );
            h = PointReporterWidget( ...
                figure_handle, ...
                [ x y ], ...
                obj.FONT_SIZE ...
                );
            
            obj.previous_position = h.get_position();
            
        end
        
        
        function h = add_visualization_widget( ....
                obj, ...
                figure_handle, ...
                button_callback ...
                )
            
            x = obj.center( VisualizationWidget.get_width() );
            y = obj.get_next_y( VisualizationWidget.get_height( obj.FONT_SIZE ) );
            h = VisualizationWidget( ...
                figure_handle, ...
                [ x y ], ...
                obj.FONT_SIZE, ...
                button_callback ...
                );
            
            obj.previous_position = h.get_position();
            
        end
        
        
        function h = add_objective_picker_widget( ...
                obj, ...
                figure_handle, ...
                titles, ...
                initial_index, ...
                list_box_callback ...
                )
            
            x = obj.center( ObjectivePickerWidget.get_width() );
            y = obj.get_next_y( ObjectivePickerWidget.get_height( obj.FONT_SIZE ) );
            h = ObjectivePickerWidget( ...
                figure_handle, ...
                [ x y ], ...
                obj.FONT_SIZE, ...
                titles, ...
                initial_index, ...
                list_box_callback ...
                );
            
            obj.previous_position = h.get_position();
            
        end
        
        
        function h = add_axes_widget( ...
                obj, ...
                figure_handle, ...
                button_down_callback ...
                )
            
            h = AxesWidget( ...
                figure_handle, ...
                [ 0 0 ], ...
                obj.FONT_SIZE, ...
                button_down_callback ...
                );
            pos = h.get_position();
            pos( 1 ) = obj.center( h.get_width() );
            pos( 2 ) = obj.get_next_y( h.get_height() );
            h.set_position( pos );
            
            obj.previous_position = h.get_position();
            
        end
        
        
        function h = add_point_plot_widgets( ...
                obj, ...
                figure_handle, ...
                check_box_callback ...
                )
            
            x = obj.center( PointPlotWidgets.get_width() );
            y = obj.get_next_y( PointPlotWidgets.get_height( obj.FONT_SIZE ) );
            h = PointPlotWidgets( ...
                figure_handle, ...
                [ x y ], ...
                obj.FONT_SIZE, ...
                check_box_callback ...
                );
            
            obj.previous_position = h.get_position();
            
        end
        
        
        function h = add_thresholding_widget( ...
                obj, ...
                figure_handle, ...
                default_id, ...
                value_picker_fns, ...
                labels, ...
                default_mins, ...
                default_maxs, ...
                default_values, ...
                selection_changed_function, ...
                edit_text_callback, ...
                slider_callback ...
                )
            
            x = obj.center( ThresholdingWidgets.get_width() );
            h = ThresholdingWidgets( ...
                figure_handle, ...
                [ x 0 ], ...
                obj.VERTICAL_PAD, ...
                obj.FONT_SIZE, ...
                default_id, ...
                value_picker_fns, ...
                labels, ...
                default_mins, ...
                default_maxs, ...
                default_values, ...
                selection_changed_function, ...
                edit_text_callback, ...
                slider_callback ...
                );
            pos = h.get_position();
            pos( 2 ) = obj.get_next_y( h.get_height() );
            h.set_position( pos );
            
            obj.previous_position = h.get_position();
            
        end
        
    end
    
    
    methods ( Access = public, Static )
        
        function surface_plotter = add_surface_plotter_widget( ...
                phi_grid, ...
                theta_grid ...
                )
            
            surface_plotter = SurfacePlotter( ...
                phi_grid, ...
                theta_grid ...
                );
            
        end
        
    end
    
    
    properties ( Access = private )
        
        figure_position
        previous_position
        
        first_widget
        
    end
    
    
    properties ( Access = private, Constant )
        
        MIN_RESOLUTION = 300;
        VERTICAL_PAD = 6;
        HORIZONTAL_PAD = 6;
        HEIGHT = 23;
        
        FONT_SIZE = 10;
        
    end
    
    
    methods ( Access = private )
        
        function y_pos = get_next_y( obj, height )
            
            if obj.first_widget
                y_pos = obj.at_top_edge( height );
                obj.first_widget = false;
            else
                y_pos = obj.below_previous( height );
            end
            
        end
        
        
        function y_pos = at_top_edge( obj, height )
            
            y_pos = obj.figure_position( 4 ) ...
                - obj.VERTICAL_PAD ...
                - height ...
                - 1;
            
        end
        
        
        function y_pos = below_previous( obj, height )
            
            y_pos = obj.previous_position( 2 ) ...
                - obj.VERTICAL_PAD ...
                - height;
            
        end
        
        
        function x_pos = center( obj, widget_width )
            
            x_pos = round( obj.figure_position( 3 ) / 2 ) ...
                - round( widget_width / 2 ) ...
                + 1;
            
        end
        
    end
    
    
    methods ( Access = private, Static )
        
        function pos = compute_figure_position( resolution_px )
            
            assert( resolution_px >= WidgetFactory.MIN_RESOLUTION );
            pos = [ ...
                0, ...
                0, ...
                1.8 * resolution_px + 1, ...
                1.2 * make_odd( resolution_px ) ...
                ];
            
        end
        
    end
    
end

